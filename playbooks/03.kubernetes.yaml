- name: Install Kubernetes
  hosts: all
  become: true
  handlers:
    - name: restart kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
  vars:
    k8s_packages:
      - kubelet
      - kubeadm
      - kubectl
    k8s_version: "1.34"

  tasks:
    - name: Update package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages for Kubernetes repository
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - apt-transport-https
        state: present

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes GPG key
      ansible.builtin.apt_key:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: present

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes packages
      ansible.builtin.apt:
        name: "{{ k8s_packages }}"
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{ k8s_packages }}"

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes

    - name: Configure containerd for Kubernetes
      ansible.builtin.copy:
        content: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
              SystemdCgroup = true
        dest: /etc/containerd/config.toml
      notify: restart kubelet

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    - name: Verify Kubernetes installation
      ansible.builtin.command: kubeadm version
      register: kubeadm_version
      changed_when: false

    - name: Display Kubernetes version
      ansible.builtin.debug:
        msg: "Kubernetes installed successfully: {{ kubeadm_version.stdout }}"

- name: Initialize Kubernetes Cluster
  hosts: master
  become: true
  tasks:
    - name: Check if cluster is already initialized
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf

    - name: Initialize Kubernetes cluster
      ansible.builtin.command: kubeadm init --pod-network-cidr=192.168.0.0/16
      when: not k8s_admin_conf.stat.exists
      register: kubeadm_init

    - name: Create .kube directory for user
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: ansible_user != "root"

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      when: ansible_user != "root"

    - name: Generate join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Save join command
      ansible.builtin.set_fact:
        k8s_join_command: "{{ join_command.stdout }}"

    - name: Display join command
      ansible.builtin.debug:
        msg: "Join command: {{ k8s_join_command }}"

- name: Join Worker Nodes
  hosts: workers
  become: true
  tasks:
    - name: Check if node is already joined
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join cluster
      ansible.builtin.command: "{{ hostvars[groups['master'][0]]['k8s_join_command'] }}"
      when: not kubelet_conf.stat.exists
